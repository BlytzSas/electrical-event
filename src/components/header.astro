---
type TSection = {
	title: string;
	section: string;
};

const sections: TSection[] = [
	{
		title: "Home",
		section: "#home",
	},
	{
		title: "Sobre nosotros",
		section: "#about-us",
	},
	{
		title: "Servicios",
		section: "#services",
	},
	{
		title: "Portafolio",
		section: "#portafolio",
	},
	{
		title: "Cont√°ctanos",
		section: "#contact",
	},
];
---

<header class="hidden items-center justify-center transition-colors duration-300 fixed w-full md:w-14 h-screen right-0 top-0 md:flex md:border-l z-50">
  <button
    id="closeMenu"
    class="absolute top-[-8px] right-5 p-2 rounded md:hidden z-50"
    type="button"
  >
    <span class="button-icon"></span>
  </button>
  <nav class="w-full">
    <ul class="flex flex-col items-center justify-between h-2/3 pt-16 md:pt-0">
      {sections.map((section: TSection) => (
        <li class="flex items-center justify-center px-8 py-4 cursor-pointer">
          <a href={section.section} class="nav-link font-slab vertical-txt">{section.title}</a>
        </li>
      ))}
    </ul>
  </nav>
</header>

<style>
  header {
    background-color: var(--bg-color);
    border-color: var(--border-color);
    transition: all 0.3s ease-in-out;
  }

  .nav-link {
    color: var(--text-color);
  }

  .vertical-txt {
  	writing-mode: vertical-rl;
  	@media only screen and (max-width: 425px) {
  		writing-mode: horizontal-tb;
  	}
  }

  .button-icon {
  	&:after {
  		content: "\d7";
  		font-size: 50px;
  		color: var(--text-color);
  		text-align: center;
  	}
  }

  /* Apply theme CSS variables */
  :global(html.dark) header {
    --bg-color: #000;
    --text-color: #FFF;
    --border-color: #333;
  }

  :global(html.light) header {
    --bg-color: #FFF;
    --text-color: #000;
    --border-color: #e5e5e5;
  }
</style>

<script>
  const closeBtn = document.getElementById("closeMenu");
  const header = document.querySelector("header");
  const navLinks = document.querySelectorAll(".nav-link");

  const closeMenu = () => {
  	if (window.innerWidth < 768) {
  		// Only close on mobile
  		header?.classList.remove("flex");
  		header?.classList.add("hidden");
  	}
  };

  closeBtn?.addEventListener("click", closeMenu);

  // Add click handlers to all navigation links
  navLinks.forEach((link) => {
  	link.addEventListener("click", closeMenu);
  });

  // Handle theme changes
  const updateHeaderTheme = () => {
    // This function will run whenever the theme changes
    // The actual styling is handled by CSS variables
  };

  // Call once on load
  updateHeaderTheme();

  // Observer for theme changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (
        mutation.type === 'attributes' &&
        mutation.attributeName === 'class' &&
        mutation.target === document.documentElement
      ) {
        updateHeaderTheme();
      }
    });
  });

  // Start observing document.documentElement for class changes
  observer.observe(document.documentElement, { attributes: true });
</script>
